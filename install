# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
clear
REGION=us-central1

# Globals has a lot of helpful functions around display. 
source globals

print_title "BASICLB INSTALL" "This process will create an Instance Template, a Managed Instance Group, and Load Balancer to serve it" "5"

BASENAME=basiclb
get_project_id PROJECT
ZONE=us-central1-a
SIZE=3

if  [[ "$PROJECT" = "" ]]
then
    handleNoProject
fi


# Collect parameters here. Each of these allows a default, and a value to be
# set via command line invocation. Makes it much easy to troubleshoot this.
collectParamters PROJECT "$1" "the id of the Google Cloud Project" "$PROJECT" 
collectParamters ZONE "$2" "the geographical zone for the VMs" "$ZONE" 
collectParamters SIZE "$3" "the number of VMs to populate the Managed Instance Group" "$SIZE" 

gcloud config set project ${PROJECT}


# All of these require the project id to be set. 
get_project_number  PROJECTNUMBER $PROJECT
get_build_serviceaccount SABUILD $PROJECTNUMBER
get_compute_serviceaccount SACOMPUTE $PROJECTNUMBER

# This is mostly for debugging, but I think it gives a nice user experience. 
printf "${BCYAN}Project Details${NC} \n"
printf "Project ID:         $PROJECT \n"
printf "Project Number:     $PROJECTNUMBER \n"


section_open "Enabling services in your GCP project"
    gcloud services enable compute.googleapis.com 
section_close


section_open "Create Instance Exemplar on which to base Managed VMs"
    gcloud compute instances create $BASENAME-exemplar \
    --zone $ZONE --machine-type "n1-standard-1" \
    --image-project "debian-cloud" --image-family "debian-10" --boot-disk-size "200" \
    --no-boot-disk-auto-delete --boot-disk-type "pd-standard" \
    --boot-disk-device-name "$BASENAME-exemplar"  --tags "http-server"
    # Shhhhh VM's are cranky when then wake - this always errors the first time 
    # an ssh command is sent, so WE GONNA DO IT AGAIN 
    gcloud compute ssh $BASENAME-exemplar --zone $ZONE --command="sudo apt-get update -y"
    printf "${BCYAN}Don't worry about this error. It seems like it's necessary${NC} \n"
    gcloud compute ssh $BASENAME-exemplar --zone $ZONE --command="sudo apt-get update -y"
    gcloud compute ssh $BASENAME-exemplar --zone $ZONE --command="sudo apt-get install nginx -y"
    gcloud compute scp code/index.html  $BASENAME-exemplar:~/ --zone=$ZONE
    gcloud compute ssh $BASENAME-exemplar --zone $ZONE --command="sudo mv index.html /var/www/html/index.html"
    gcloud compute ssh $BASENAME-exemplar --zone $ZONE --command="sudo chgrp root /var/www/html/index.html"
    gcloud compute ssh $BASENAME-exemplar --zone $ZONE --command="sudo chown root /var/www/html/index.html"
    gcloud compute ssh $BASENAME-exemplar --zone $ZONE --command="sudo chmod +r /var/www/html/index.html"
 section_close





section_open "Create Disk Image for Instance Template"
    gcloud compute instances delete $BASENAME-exemplar --zone $ZONE -q
    gcloud compute images create $BASENAME-latest --family=$BASENAME \
    --source-disk=$BASENAME-exemplar --source-disk-zone=$ZONE
 section_close

section_open "Create Instance Template"
    gcloud compute instance-templates create $BASENAME-template \
    --create-disk=image=$BASENAME-latest,image-project=$PROJECT,size=200GB \
    --tags "http-server" --metadata-from-file=startup-script=startup.sh
section_close

section_open "Create Managed Instance Group"
    gcloud compute instance-groups managed create $BASENAME-mig \
    --size $SIZE --template $BASENAME-template --zone $ZONE

    gcloud compute instance-groups set-named-ports $BASENAME-mig \
    --named-ports http:80 \
    --zone $ZONE
section_close

section_open "Creating External IP"
    gcloud compute addresses create $BASENAME-ip \
	--network-tier=PREMIUM --ip-version=IPV4 --global
section_close

section_open "Standing up Load Balancer"

    gcloud compute health-checks create tcp $BASENAME-health-chk \
    --port 80

    gcloud compute firewall-rules create allow-health-check \
        --allow tcp:80 \
        --source-ranges 130.211.0.0/22,35.191.0.0/16 \
        --network default

     gcloud compute backend-services create $BASENAME-service \
        --load-balancing-scheme=EXTERNAL \
        --protocol=HTTP \
        --port-name=http \
        --health-checks=$BASENAME-health-chk \
        --global

    gcloud compute backend-services add-backend $BASENAME-service \
        --instance-group=$BASENAME-mig \
        --instance-group-zone=$ZONE --global 

    gcloud compute url-maps create $BASENAME-lb  \
    --default-service=$BASENAME-service
section_close
	
section_open "Enabling HTTP"
    gcloud compute target-http-proxies create $BASENAME-lb-proxy \
    --url-map=$BASENAME-lb

    gcloud compute forwarding-rules create $BASENAME-http-lb-forwarding-rule \
    --address=$BASENAME-ip --global --target-http-proxy=$BASENAME-lb-proxy \
    --ports=80
section_close



IP=$(gcloud compute addresses describe $BASENAME-ip --global --format="value(address)")


section_open "Waiting for website to be serving http"
await_command STATUS 5 60 "url200" $IP $IP
section_close




# Give a success message. If you are spinning up something that is available at 
# a url, make sure you print that url - ESPECIALLY if it is dynamically created 
printf "$DIVIDER"
printf "CONGRATS!!!!!!! \n"
printf "You have configured a project, spun up architecture and deployed code.\n"
printf "See your site at:\n"
printf "${UCYAN}http://$IP${NC} \n"
printf "$DIVIDER"	